============
软件系统设计
============

软件系统设计可以分四步走：

1. 明确使用场景和约束。审视问题。不停地提问，以至于我们可以明确使用场景和约束。
2. 创造一个高层级的设计。使用所有重要的组件描绘出一个高层级的设计。
3. 设计核心组件。对每一个核心组件进行详细深入的分析。
4. 扩展设计。确认和处理瓶颈以及一些限制。


明确使用场景和约束
------------------

在这个阶段，尝试回答以下问题：

- 谁会使用它？
- 他们会怎样使用它？
- 有多少用户？
- 系统的作用是什么？
- 系统的输入输出分别是什么？
- 我们希望处理多少数据？
- 我们希望每秒钟处理多少请求？
- 我们希望的读写比率？


高层级设计
----------

在这一阶段，我们尝试：

- 画出主要的组件和连接
- 并证明你的想法的可行性


设计核心组件
------------

什么叫核心组件？某个功能模块可以叫做核心组件，比如 url 缩写服务。设计细节包括：

- 生成并存储一个完成的 url 的 hash
- 将一个 hashed url 翻译成完整的 url
- API 和面向对象设计
- 域名系统（DNS）
- 内容分发网络（CDN）

那么每个细节展开来讲，又会有比较多的考虑。如下：

生成并存储一个完成的 url 的 hash 时，用 MD5 还是用 Base62 生成散列函数？如何处理 hash 碰撞？SQL 还是 NoSQL，数据库模型选哪个？

.. hint:: 

    NoSQL 是一个统称，它包括键-值存储、文档存储、列型存储以及图数据库。

将一个 hashed url 翻译成完整的 url 时，如何确定数据库查找算法？

选择域名系统时，记录类型？缓存位置？路由方式？DNS 失效如何解决？

设计内容分发网络时，CDN 的推送和拉取怎么实现？如何确认 CDN 缓存已经失效？


可扩展性设计
------------

扩展设计指的是当用户量增加时，系统还能否满足要求。在这个阶段，我们通常会考虑：

- 负载均衡器（优点、缺点、路由方式）
- 反向代理（优点、缺点、与负载均衡器对比）
- 垂直和水平扩展
- 缓存（缓存到哪里、什么级别的缓存、什么时候更新缓存）
- 数据库设计（数据库复制、联合、分片、SQL 还是 NoSQL、调优技巧）
- 异步（消息队列、任务队列、背压）
- 微服务
- 可用性与一致性（分布式计算系统、CAP 理论）
- 通信（HTTP、TCP、UDP、RPC、REST）
- 安全（加密传输、防止 SQL 注入、最小权限原则）


参考文献
--------

1. https://github.com/donnemartin/system-design-primer