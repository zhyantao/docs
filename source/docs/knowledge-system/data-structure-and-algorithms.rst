==============
数据结构与算法 
==============

:footcite:p:`左程云2019程序员代码面试指南`

栈和队列
--------

设计一个有 getMin 功能的栈
~~~~~~~~~~~~~~~~~~~~~~~~~~

- 压入时的规则
- 弹出时的规则
- 查询最小值的规则

有两个栈组成的队列
~~~~~~~~~~~~~~~~~~

- 两个栈
- 一次性全部倒入
- 不为空不能倒

仅用递归和栈操作逆序一个栈
~~~~~~~~~~~~~~~~~~~~~~~~~~

设计两个递归函数
^^^^^^^^^^^^^^^^

第一步：先拿到自定义栈的栈底元素，然后将除栈底元素以外的其他元素重新压栈。第一步很关键，通常我们能够直接取到栈顶元素，但是无法直接取到栈底元素。利用递归帮助我们克服了困难。

第二步：将自定义栈的栈底元素依次压入系统栈中，然后将系统栈的元素弹出后重新压入自定义栈。第二步是将自定义的栈复制到了系统栈中。复制完成后，相当与有了两个栈，那么直接逆序系统栈，保存到自定义栈中就很容易了。


如何理解递归调用
^^^^^^^^^^^^^^^^

- 观察递归调用语句（找分割线）可以对压栈和弹栈的过程画一个草图
  
  - 递归调用之前的语句：被压入系统栈
  - 递归调用之后的语句：被弹出系统栈

- 观察return语句（找返回值）

  - 如果只有一个return语句，那么整个函数里面的语句都将被重复执行，直到满足if终止条件
  - 如果有两个或多个return语句，首先会执行递归调用之前return语句，该语句执行后，递归调用之后的语句将不会执行。递归调用之前的语句返回的是函数本次执行的结果，递归调用之后的语句返回的是上一次函数执行的结果。

- 观察递归调用返回值有没有被接收（找返回值）

  - 如果递归调用返回值被一个变量接收，那么递归调用后面的语句可以操作本次函数执行的结果
  - 如果递归调用的返回值没有被接收，那么递归调用之后的语句操作的返回值将会是上一次函数执行的结果

.. warning:: 

    递归调用在执行过程中会经过多次return，但是程序的出口只有一个，也就是说，递归调用的真正的返回值只有一个，其他返回值都是中间过程产生的返回值，是为最后一次返回值服务的。

猫狗队列
~~~~~~~~~

维护两个队列，分别为猫和狗，猫队列中存储猫对象，狗队列中存储狗对象

对于添加顺序，用时间戳作为标记，时间戳不一定就是指的是时间，它能表示先后顺序就可以了

用一个栈实现另一个栈的排序
~~~~~~~~~~~~~~~~~~~~~~~~~~

1. 用 cur 变量存储从 stack 中弹出的值，用 help 表示辅助栈
2. 如果 cur < help.peek() 循环压入，stack 栈空停止，否则，循环弹出 help.poll() 到 stack ，help 栈空停止

用栈来求解汉诺塔问题
~~~~~~~~~~~~~~~~~~~~

附加限制：不能跳过“中”，不能直接从“左”到“右”。

**递归方法**

.. hint:: 

   - 理解并学习如何在递归的过程中打印有用信息
   - 理解抽象的移动动作和实际的移动动作

- 只剩下最上层 的塔需要移动（情况 1：递归终止条件）
- 剩下 N 层塔的需要移动
- 都在“左”，移动到“中”（情况 2：和“中”有关）
  
  - 将 1 ~ N - 1 层从“左”移动到 “右”（递归）
  - 第 N 层从“左”移动到“中”
  - 将 1 ~ N - 1 层从“右”移动到“中”（递归）

- 都在“中”，移动到“左”（情况 2：和“中”有关）
  
  - 将 1 ~ N - 1 层从“中”移动到 “右”（递归）
  - 第 N 层从“中”移动到“左”
  - 将 1 ~ N - 1 层从“右”移动到“中”（递归）

- 都在“中”，移动到“右”（情况 2：和“中”有关）
  
  - 将 1 ~ N - 1 层从“中”移动到 “左”（递归）
  - 第 N 层从“中”移动到“右”
  - 将 1 ~ N - 1 层从“左”移动到“右”（递归）

- 都在“右”，移动到“中”（情况 2：和“中”有关）
  
  - 将 1 ~ N - 1 层从“右”移动到 “左”（递归）
  - 第 N 层从“右”移动到“中”
  - 将 1 ~ N - 1 层从“左”移动到“中”（递归）

- 都在“左”，移动到“右”（情况 3）
  
  - 将 1 ~ N - 1 层从“左”移动到“右”（递归）
  - 将第 N 层从“左”移动到“中”
  - 将 1 ~ N - 1 层从“右”移动到“左”（递归）
  - 将第 N 层从“中”移动到“右”
  - 将 1 ~ N -1 层从“左”移动到“右”（递归）

- 都在“右”，移动到“左”（情况 3）
  
  - 将 1 ~ N - 1 层从“右”移动到“左”（递归）
  - 将第 N 层从“右”移动到“中”
  - 将 1 ~ N - 1 层从“左”移动到“右”（递归）
  - 将第 N 层从“中”移动到“左”
  - 将 1 ~ N -1 层从“右”移动到“左”（递归）

链表问题
--------


参考文献
---------

.. footbibliography::


