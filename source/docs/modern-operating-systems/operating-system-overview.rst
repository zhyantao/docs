============
操作系统概述
============

操作系统的概念、功能
--------------------

操作系统的概念（定义）

- 负责管理协调硬件、软件等计算机资源的工作
- 为上层用户、应用程序提供简单易用的服务
- 是一种系统软件

功能和目标

- 资源管理者

  - 处理机管理
  - 存储器管理
  - 文件管理
  - 设备管理

- 向上层提供服务

  - 给普通用户的

    GUI 用户图形用户界面
    命令接口
    联机命令接口（cmd）
    脱机命令接口（.bat）


  - 给软件/程序员用的
        
    程序接口即系统调用

- 对硬件机器的扩展

  - 扩充机器



操作系统的特征
--------------

没有并发和共享，就谈不上虚拟和异步，因此并发和共享是操作系统的两个最基本的特征

并发（最基本）

共享（最基本）（与并发互为存在条件）

- 互斥共享方式（如对摄像头设备的共享使用）
- 同时共享方式（如对硬盘资源的共享使用）

虚拟

- 空分复用技术（如虚拟存储器技术）
- 时分复用技术（如虚拟处理器技术）

异步

操作系统的发展与分类
--------------------

手工操作阶段

- 缺：人机速度矛盾

批处理阶段

- 单批道处理系统

  - 引入脱机输入输出技术
  - 优：缓解人机速度矛盾
  - 缺：资源利用率依然很低

- 多批到处理系统
  
  - 操作系统开始出现
  - 优：多道程序并发执行，资源利用率高
  - 缺：不提供人机交互


分时操作系统

- 优：提供人机交互功能
- 缺：不能优先处理紧急任务

实时操作系统

- 硬实时系统：必须在绝对严格的规定时间内完成处理
- 软实时系统：能接受偶尔违反时间规定
- 优：能优先处理紧急任务

网络操作系统

分布式操作系统

个人计算机操作系统

操作系统的运行机制
------------------

简单了解程序的运行原理

- 高级语言编写代码 → 机器指令
- 程序运行的过程就是CPU执行指令的过程

两类程序

- 内核程序
- 应用程序

两类指令

- 特权指令
- 非特权指令

两种处理器状态

- 内核态/核心态/管态
- 用户态/目态

操作系统内核

- 内核（Kernel）是操作系统最重要最核心的部分
- 由很多内核程序组成操作系统内核​
- 时钟管理：实现计时功能
- 中断处理：负责实现中断机制
- 原语
  
  - 是一种特殊的程序
  - 处于操作系统最底层，是最接近硬件的部分
  - 这种程序的运行具有原子性——其运行只能一气呵成，不可中断
  - 运行时间较短，调用频繁

- 对系统资源进行管理的功能
  
  - 进程管理
  - 存储器管理
  - 设备管理

- 操作系统的层次结构

如何变态

- 内核态 → 用户态：修改一条PSW的特权指令
- 用户态 → 内核态：由中断引起，硬件自动完成

中断和异常

- 中断的作用
- 没有中断机制，就不可能实现操作系统，不可能实现程序并发
  
  - 让操作系统内核强行夺回CPU的控制权
  - 使CPU从用户态变为内核态

- 中断的分类

  - 内中断（也称异常、例外）

    - 陷阱、陷入（trap）
    - 故障（fault）
    - 终止（abort）

  - 外中断（也称中断）
    
    - 时钟中断
    - I/O中断请求


- 中断机制的基本实现原理
    
  - 检查中断信号
        
    - 内中断：CPU在执行指令时会检查是否有异常发生
    - 外中断：每个指令周期末尾，CPU都会检查是否有外部中断信号需要处理

  - 找到相应的中断处理程序
        
    - 通过中断向量表实现



系统调用

- 什么是系统调用？
    
  - 操作系统对应用程序或程序员提供的接口

- 系统调用与库函数的区别
  
  - 有的库函数是对系统调用的进一步封装
  - 有的库函数没有使用系统调用​​

- 为什么系统调用是必须的
  
  - 保证系统的稳定性和安全性。如同时打印两份文件

- 什么功能要用系统调用实现？
  
  - 设备管理
  - 文件管理：凡是与共享资源有关的操作、会直接影响到其他进程的操作，就一定需要操作系统介入，就需要通过系统调用来实现
  - 进程管理
  - 进程通信
  - 内存管理

- 系统调用的过程
  
  - 传参
  - 陷入指令/Trap/访管
  - 由操作系统内核程序处理系统调用请求
  - 返回应用程序

操作系统的体系结构
------------------

大内核

- 将操作系统的主要功能模块都作为系统内核，运行在核心态
- 优点：高性能
- 缺点：内核代码庞大，结构混乱，难以维护

微内核

- 只把最基本的功能保留在内核
- 优点：内核功能少，结构清晰，方便维护
- 缺点：需要频繁地在核心态和用户态之间切换，性能低
