================
通过异常处理错误
================

发现错误的理想时机是在编译阶段。错误恢复机制是代码健壮性的最强有力的方式。

基本异常
---------

异常情形    
    阻止当前方法或作用域继续执行。

抛出异常    
    从当前环境跳出，并且把异常对象的引用 throw 给上一级环境，上一级环境是指外层作用域。故可以用抛出异常的方式从当前的作用域退出。
    
    抛出异常后，会发生：

    - 首先，同 Java 中其他对象的创建一样，使用 new 在堆上创建异常对象。
    - 然后，当前的执行路径被终止，并且从当前环境中弹出对异常对象的引用。
    - 异常处理机制接管程序，并寻找异常处理程序来继续执行程序。

异常处理程序    
    将程序从错误状态中恢复，以使程序能要么换一种方式运行，要么继续运行下去。

异常参数
~~~~~~~~~

标准异常类都有两个构造器，一个默认构造器，另一个是接受字符串作为参数，以便能够把相关信息放入异常对象的构造器。

能够抛出任意类型的 Throwable 对象是异常类型的根类。

错误信息可以保存在异常对象内部或者用异常类的名称来暗示。通常，异常对象中仅有的信息就是异常类型，除此之外，不包含任何有意义的内容。

捕获异常
---------

监控区域（guarded region）
    一段可能产生异常的代码，并且后面跟着处理这些异常的代码。

try 块
~~~~~~~



异常处理程序
~~~~~~~~~~~~
创建自定义异常
--------------
异常与记录日志
~~~~~~~~~~~~~~
异常说明
---------
捕获所有异常
------------
栈轨迹
~~~~~~
重新抛出异常
~~~~~~~~~~~~
异常链
~~~~~~
Java 标准异常
-------------
特例：RuntimeException
~~~~~~~~~~~~~~~~~~~~~~~
使用 finally 进行清理
----------------------
finally 用来做什么
~~~~~~~~~~~~~~~~~~~
在 retrun 中使用 finally
~~~~~~~~~~~~~~~~~~~~~~~~~
缺憾：异常丢失
~~~~~~~~~~~~~~
异常的限制
----------
构造器
------
异常匹配
--------
其他可选方式
------------
历史
~~~~~
观点
~~~~~
把异常传递给控制台
~~~~~~~~~~~~~~~~~~~
把“被检查的异常”转换为“不检查的异常”
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
异常使用指南
------------